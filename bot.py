from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Filter
from aiogram.types import ContentType
import asyncio
import aiosqlite
import json

BOT_TOKEN = "7661009860:AAHs7J0C-BHsFSa_cLK04yfv5lqlTG3lZ4E"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
class WebAppDataFilter(Filter):
    async def __call__(self, message: types.Message) -> bool:
        return message.content_type == ContentType.WEB_APP_DATA


@dp.message(Command("add"))
async def add_points(message: types.Message):
    await update_balance(message.from_user.id, 10)
    balance = await get_balance(message.from_user.id)
    await message.answer(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω. –°–µ–π—á–∞—Å —É —Ç–µ–±—è {balance} –æ—á–∫–æ–≤.")


@dp.message(WebAppDataFilter())
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)  # JSON —Å—Ç—Ä–æ–∫–∞ ‚Üí —Å–ª–æ–≤–∞—Ä—å
        reward = data.get("reward", 0)

        await update_balance(message.from_user.id, reward)
        balance = await get_balance(message.from_user.id)

        await message.answer(
            f"–¢—ã –ø–æ–ª—É—á–∏–ª {reward} –º–æ–Ω–µ—Ç! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –æ—á–∫–æ–≤."
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


@dp.message()
async def handle_message(message: types.Message):
    await add_user_if_not_exists(message.from_user.id, message.from_user.username or "")
    balance = await get_balance(message.from_user.id)

    button = types.KeyboardButton(
        text="üéÅ –û—Ç–∫—Ä—ã—Ç—å WebApp",
        web_app=types.WebAppInfo(url="https://KreSouS.github.io/tg-gift-webapp1/")
    )
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[button]],
        resize_keyboard=True
    )

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username or message.from_user.first_name}!\n"
        f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance} –æ—á–∫–æ–≤.\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def add_user_if_not_exists(user_id: int, username: str):
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
            (user_id, username)
        )
        await db.commit()


async def get_balance(user_id: int):
    async with aiosqlite.connect("bot_database.db") as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else 0


async def update_balance(user_id: int, amount: int):
    async with aiosqlite.connect("bot_database.db") as db:
        await db.execute(
            "UPDATE users SET balance = balance + ? WHERE user_id = ?",
            (amount, user_id)
        )
        await db.commit()


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
